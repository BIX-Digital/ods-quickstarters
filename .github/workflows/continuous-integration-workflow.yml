name: Continous Integration Tests
on: [ push, pull_request ]
jobs:
  jenkins-slave-golang:
    name: Jenkins Slave Go
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Build docker image
        working-directory: common/jenkins-slaves/golang
        run: |
          docker build -t slave-go-test -f Dockerfile.rhel7

  jenkins-slave-maven:
    name: Jenkins Slave Maven
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Build docker image
        working-directory: common/jenkins-slaves/maven
        run: |
            docker build -t slave-maven-test -f Dockerfile.rhel7

  jenkins-slave-nodejs10-angular:
    name: Jenkins Slave NodeJS 10 - Angular
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Build docker image
        working-directory: common/jenkins-slaves/nodejs10-angular
        run: |
            docker build -t slave-nodejs10-angular-test -f Dockerfile.rhel7

  jenkins-slave-nodejs12:
    name: Jenkins Slave NodeJS 12
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Build docker image
        working-directory: common/jenkins-slaves/nodejs12
        run: |
            docker build -t slave-nodejs12-test -f Dockerfile.rhel7

  jenkins-slave-python:
    name: Jenkins Slave Python
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Build docker image
        working-directory: common/jenkins-slaves/python
        run: |
            docker build -t slave-python-test -f Dockerfile.rhel7

  jenkins-slave-scala:
    name: Jenkins Slave Scala
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v2.0.0
      -
        name: Build docker image
        working-directory: common/jenkins-slaves/scala
        run: |
            docker build -t slave-scala-test -f Dockerfile.rhel7


#   test:
#     name: Docker plain provisioning
#     runs-on: ubuntu-16.04
#     steps:
#       - 
#         name: GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: jq . <<< "${GITHUB_CONTEXT}"
#       - 
#         name: Checkout QuickStarters repository
#         uses: actions/checkout@v2.0.0
#         with:
#           fetch-depth: 0
#           path: ods-quickstarters
#       - 
#         name: Checkout ODS Core
#         uses: actions/checkout@v2.0.0
#         with:
#           fetch-depth: 0
#           repository: opendevstack/ods-core
#           ref: master
#           path: ods-core
#       - 
#         name: Checkout ODS Jenkins Shared Library
#         uses: actions/checkout@v2.0.0
#         with:
#           fetch-depth: 0
#           repository: BIX-Digital/ods-jenkins-shared-library
#           ref: invalid/curl-http-only
#           path: ods-jenkins-shared-library
#       -
#         name: Setup Go 1.13
#         uses: actions/setup-go@v1.0.0
#         with:      
#           version: 1.13
#       -
#         name: Download OpenShift Client
#         run: |
#           wget https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz
#           tar -xzvf openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz
#           sudo mv openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc /usr/local/bin/oc
#       -
#         name: Download Tailor
#         run: |
#           curl -LO "https://github.com/opendevstack/tailor/releases/download/v0.11.0/tailor-linux-amd64"
#           chmod +x tailor-linux-amd64
#           sudo mv tailor-linux-amd64 /usr/local/bin/tailor
#       -
#          name: Tailor version
#          run: tailor version
#       -
#          name: OpenShift client version
#          run: oc version
#       -
#          name: jq version
#          run: jq --version
#       -
#          name: golang version
#          run: go version
#       -
#          name: Docker version
#          run: docker --version
#       -
#          name: Network before changes
#          run: ifconfig
#       -
#          name: Configure docker network and insecure registries
#          run: ls -la && ls -la ./tests && ./tests/scripts/apply-docker-settings.sh
#          working-directory: ${{  format('{0}/ods-core', github.workspace) }}
#       -
#          name: Start OC cluster
#          run: oc cluster up --base-dir=${HOME}/openshift.local.clusterup --routing-suffix 172.17.0.1.nip.io --public-hostname 172.17.0.1 --enable=centos-imagestreams --enable=persistent-volumes --enable=registry --enable=router
#       -
#          name: Login into the cluster
#          run: oc login -u system:admin
#       -
#         name: Create test infrastructure
#         run: |
#           mkdir -p ods-config
#           ./tests/scripts/recreate-test-infrastructure.sh
#         working-directory: ${{  format('{0}/ods-core', github.workspace) }}
#       -
#         name: Test setup
#         run: make setup-tests
#         working-directory: ${{  format('{0}/ods-quickstarters/tests', github.workspace) }}
#       -
#         name: Run tests
#         run: make test
#         working-directory: ${{  format('{0}/ods-quickstarters/tests', github.workspace) }}
