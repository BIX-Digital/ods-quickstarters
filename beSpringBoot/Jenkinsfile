
def projectId = env.PROJECT_ID;
def componentId = env.COMPONENT_ID.toLowerCase();
def packageName = env.PACKAGE_NAME;
def gitUrlHttp = env.GIT_URL_HTTP
def gitUrlSsh = env.GIT_URL_SSH
def group = "org.osi";
def nexusHost = env.NEXUS_HOST;


def credentialsId = "cd-user-with-password"
def springQuickstarterBasepath = "beSpringBoot";
def dockerRegistry

node {
  dockerRegistry = env.DOCKER_REGISTRY
}

def conts = containerTemplate( 
            name: 'jnlp',
            image: "${dockerRegistry}/cd/jenkins-slave-base",
            workingDir: '/tmp',
            alwaysPullImage: true,
            args: ''
        )

def podLabel = "quickstarter-beSpringBoot-" + projectId + "-" +componentId;


podTemplate(
      label: podLabel,
      cloud: 'openshift',
      containers: [conts],
      volumes: [],
      serviceAccount: 'jenkins'
    ) {
        node(podLabel) {
          stage('checkout quickstarter'){
            checkout scm
          }
          stage('install spring') {
              sh 'curl -s "https://get.sdkman.io" | bash'
              sh '/bin/bash -lc "source /home/jenkins/.sdkman/bin/sdkman-init.sh && sdk install springboot $SPRING_CLI_VERSION && spring --version"'
          }
          stage('build spring project') {
            sh "/home/jenkins/.sdkman/candidates/springboot/current/bin/spring init \
                --build=gradle \
                --java-version='1.8' \
                --groupId=${projectId} \
                --artifactId=${componentId} \
                --package-name='${packageName}' \
                --packaging=jar \
                --dependencies='web,jersey,data-jpa,h2,lombok,data-rest,restdocs,security' \
                  ${componentId}"
            withEnv(["COMPONENT=${componentId}","GROUP=${group}","SCRIPT_DIR=${springQuickstarterBasepath}"]) {
              sh "sh ./${springQuickstarterBasepath}/postProcessProjectsettings.sh"            
            }
          }

          stage('setup openshift'){
            sh "sh common/scripts/create-component.sh -p ${projectId} -c ${componentId} -ne ${nexusHost} --force"
          }
          stage('create Jenkinsfile') {
            sh "sh common/scripts/renderJenkinsTemplate.sh \
                  --source ${springQuickstarterBasepath}/files/Jenkinsfile.template \
                  --target ${componentId}/Jenkinsfile \
                  --url ${gitUrlHttp} \
                  --project-id ${projectId} \
                  --component-id ${componentId}  \
                  --component-type ${springQuickstarterBasepath}"
          }
                    stage('create Sonarq') {
            sh "sh common/scripts/renderSonarqubeTemplate.sh \
                  --source ${springQuickstarterBasepath}/files/sonar-project.properties.template \
                  --target ${componentId}/sonar-project.properties \
                  --project-id ${projectId} \
                  --component-id ${componentId}  \
                  --component-type ${springQuickstarterBasepath}"
          }
          stage('push it'){
            writeFile file: "/home/jenkins/.netrc", text: "machine 192.168.56.31 login cd_user password cd_user"
            sh "sh common/scripts/git_push.sh --dir ${componentId} --url ${gitUrlHttp}"
          }
      }
}






